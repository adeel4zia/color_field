<?php
/**
 * @file
 * Tests for Color Field.
 */

/**
 * Defines a class for testing the color field module (Plain Text).
 */
class ColorFieldPlainTextTest extends BackdropWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Color Field (Plain Text)',
      'description' => 'Check Color Field main features for Plain Text Widget.',
      'group' => 'Color Field',
    );
  }

  function setUp() {
    // Enable the color_field module.
    parent::setUp(array('field_ui', 'color_field'));
  }

  /**
   * Test basic functionality of the color field.
   */
  function testColorFieldDefault() {
    $content_type_friendly = $this->randomName(20);
    $content_type_machine = strtolower($this->randomName(10));
    $title = $this->randomName(20);

    // Create and login user.
    $account = $this->backdropCreateUser(array('administer content types'));
    $this->backdropLogin($account);

    // Create the content type.
    $this->backdropGet('admin/structure/types');

    // Create the content type.
    $this->clickLink(t('Add content type'));

    $edit = array(
      'name' => $content_type_friendly,
      'type' => $content_type_machine,
    );
    $this->backdropPost(NULL, $edit, t('Save and add fields'));
    $this->assertText(t('The content type @name has been added.', array('@name' => $content_type_friendly)));

    $single_field_name_friendly = $this->randomName(20);
    $single_field_name_machine = strtolower($this->randomName(10));
    $multivalue_field_name_friendly = $this->randomName(20);
    $multivalue_field_name_machine = strtolower($this->randomName(10));

    // Field definitions.
    $fields[$single_field_name_machine] = array(
      'widget_type' => 'color_field_default_widget',
      'cardinality' => '1',
      'label' => $single_field_name_friendly,
    );

    $fields[$multivalue_field_name_machine] = array(
      'widget_type' => 'color_field_default_widget',
      'cardinality' => -1,
      'label' => $multivalue_field_name_friendly,
    );

    foreach ($fields as $fieldname => $details) {
      $this->create_field($fieldname, $details);
    }

    // Rebuild node types.
    node_types_rebuild();
    menu_rebuild();
    $type_exists = db_query('SELECT 1 FROM {node_type} WHERE type = :type', array(':type' => $content_type_machine))->fetchField();
    $this->assertTrue($type_exists, 'The new content type has been created in the database.');

    // Set permissions.
    $permission = 'create ' . $content_type_machine . ' content';
    $this->checkPermissions(array($permission), TRUE);

    // Create a user with content type permissions.
    $account = $this->backdropCreateUser(array($permission));
    $this->backdropLogin($account);

    $this->backdropGet('node/add/' . $content_type_machine);

    // Add a node.
    $edit = array(
      'title' => $title,
      'field_' . $single_field_name_machine . '[und][0][rgb]' => '#000001',
      'field_' . $multivalue_field_name_machine . '[und][0][rgb]' => '#000002',
    );

    // Add a second item to the multivalue field.
    $this->backdropPost(NULL, $edit, t('Add another item'));

    $edit = array(
      'field_' . $multivalue_field_name_machine . '[und][1][rgb]' => '#000003',
    );
    $this->backdropPost(NULL, $edit, t('Save'));
    $this->assertText(t('@content_type_friendly @title has been created', array('@content_type_friendly' => $content_type_friendly, '@title' => $title)));

    $output_strings = $this->xpath("//div[contains(@class,'field-type-color-field-rgb')]/div/div/text()");

    $this->assertEqual((string) $output_strings[0], "#000001");
    $this->assertEqual((string) $output_strings[1], "#000002");
    $this->assertEqual((string) $output_strings[2], "#000003");
  }

  /**
   * Utility function to create fields on a content type.
   * @param $field_name
   *   Name of the field, like field_something
   * @param $widget_type
   *   Widget type, like field_example_3text
   * @param $cardinality
   *   Cardinality
   */
  protected function create_field($field_name, $details) {
    $edit = array(
      'fields[_add_new_field][label]' => $details['label'],
      'fields[_add_new_field][field_name]' => $field_name,
      'fields[_add_new_field][type]' => 'color_field_rgb',
      'fields[_add_new_field][widget_type]' => $details['widget_type'],
    );

    $this->backdropPost(NULL, $edit, t('Save'));

    // Save field settings.
    $this->backdropPost(NULL, array(), t('Save field settings'));

    // Save cardinality.
    $edit = array('field[cardinality]' => (string) $details['cardinality']);
    $this->backdropPost(NULL, $edit, t('Save settings'));

    debug(t('Saved settings for field %field_name with widget %widget_type and cardinality %cardinality', array('%field_name' => $field_name, '%widget_type' => $details['widget_type'], '%cardinality' => $details['cardinality'])));
    $this->assertText(t('Saved @name configuration.', array('@name' => $details['label'])));
  }
}
